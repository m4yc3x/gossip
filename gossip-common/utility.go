package gossip_common

import (
	"log"
	"math/rand"
	"os"
	"time"

	"golang.org/x/term"
)

// Define ANSI color codes for terminal output.
const (
	cReset  = "\033[0m"
	cRed    = "\033[31m"
	cGreen  = "\033[32m"
	cYellow = "\033[33m"
	cBlue   = "\033[34m"
	cPurple = "\033[35m"
	cCyan   = "\033[36m"
	cWhite  = "\033[37m"
)

var (
	cID string
)

func Clr() {
	// Attempt to restore the terminal to a sane state.
	// This is crucial for when the program exits unexpectedly.
	fd := int(os.Stdin.Fd())
	if term.IsTerminal(fd) {
		state, err := term.GetState(fd)
		if err != nil {
			log.Printf("Error getting terminal state: %v", err)
			return
		}
		if err := term.Restore(fd, state); err != nil {
			log.Printf("Error restoring terminal state: %v", err)
		}
	}
}

/**
 * Log logs informational messages with a specific format.
 * @param format The string format for the log message.
 * @param a The arguments to be inserted into the format string.
 */
func Log(format string, a ...interface{}) {
	currentTime := time.Now().Format("2006-01-02 15:04:05")
	prefix := "[" + cYellow + currentTime + cReset + "] " + cCyan + "I: " + cReset
	suffix := cReset + "\n"
	log.SetFlags(0)
	log.Printf(prefix+format+suffix, a...)
}

/**
 * Err logs error messages with a specific format.
 * @param format The string format for the error message.
 * @param a The arguments to be inserted into the format string.
 */
func Err(format string, a ...interface{}) {
	currentTime := time.Now().Format("2006-01-02 15:04:05")
	prefix := "[" + cRed + currentTime + cReset + "] " + cRed + "E: " + cReset
	suffix := cReset + "\n"
	log.SetFlags(0)
	log.Printf(prefix+format+suffix, a...)
}

/**
 * Conn logs connection-related messages with a specific format.
 * @param format The string format for the connection message.
 * @param a The arguments to be inserted into the format string.
 */
func Conn(format string, a ...interface{}) {
	currentTime := time.Now().Format("2006-01-02 15:04:05")
	prefix := "[" + cYellow + currentTime + cReset + "] " + cBlue + "C: " + cReset
	suffix := cReset + "\n"
	log.SetFlags(0)
	log.Printf(prefix+format+suffix, a...)
}

/**
 * Dbg logs debug messages with a specific format.
 * @param format The string format for the debug message.
 * @param a The arguments to be inserted into the format string.
 */
func Dbg(format string, a ...interface{}) {
	currentTime := time.Now().Format("2006-01-02 15:04:05")
	prefix := "[" + cYellow + currentTime + cReset + "] " + cGreen + "D " + cReset
	suffix := cReset + "\n"
	log.SetFlags(0)
	log.Printf(prefix+format+suffix, a...)
}

/**
 * GenerateID generates a random string of a specified length.
 * @param length The length of the string to generate.
 * @return A random string of the specified length.
 */
func GenerateID(length int) {
	const charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
	var seededRand *rand.Rand = rand.New(rand.NewSource(time.Now().UnixNano()))
	b := make([]byte, length)
	for i := range b {
		b[i] = charset[seededRand.Intn(len(charset))]
	}
	cID = string(b)
}

/**
 * GenerateID generates a random string of a specified length.
 * @param length The length of the string to generate.
 * @return A random string of the specified length.
 */
func ReturnRandomID(length int) string {
	const charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
	var seededRand *rand.Rand = rand.New(rand.NewSource(time.Now().UnixNano()))
	b := make([]byte, length)
	for i := range b {
		b[i] = charset[seededRand.Intn(len(charset))]
	}
	return string(b)
}

/**
 * GetClientID returns the clientID generated by GenerateID function.
 * @return The clientID as a string.
 */
func GetClientID() string {
	return cID
}
